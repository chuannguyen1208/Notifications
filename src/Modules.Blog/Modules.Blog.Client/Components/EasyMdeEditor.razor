@namespace MyComps
@using Modules.Blog.Client.Services.Helper
@using System.Text
@using System.Text.RegularExpressions
@inject EditorInterop _editorInterop
@inject IBlobService _blobSvc
@inject IToastService _toastSvc
@inject IFileService _fileSvc
@inject NavigationManager nav

<textarea @ref="_textareaElement" placeholder="Type here..." style="display: none"></textarea>
<InputFile @ref="_uploadFileElement" OnChange="@LoadFile" style="display: none"></InputFile>

@code {
    ElementReference _textareaElement;
    InputFile _uploadFileElement = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _editorInterop.LoadEditorAsync(_textareaElement, _uploadFileElement.Element!.Value);
        }
    }

    private async Task LoadFile(InputFileChangeEventArgs args)
    {
        var filename = args.File.Name;
        var url = await _fileSvc.UploadFile(args.File);
        var fullUrl = nav.BaseUri + url.Replace('\\', '/');
        await _editorInterop.WriteFrontFileTempAsync(filename, fullUrl);
    }

    protected async Task LoadImageFiles(InputFileChangeEventArgs args)
    {
        var element = _uploadFileElement.Element;
        await _editorInterop.WriteFrontFileAsync(element);
    }

    public async Task<string> GetContentAsync()
    {
        var content = await _editorInterop.GetEditorValueAsync();
        var imgsMatches = StringHelper.MarkdownImgBlobGeneratedRegex().Matches(content);

        if (imgsMatches.Count > 0)
        {
            var contentStringBuilder = new StringBuilder(content);

            foreach (Match match in imgsMatches)
            {
                var blobUrl = match.Groups[1].Value;
                var res = await _blobSvc.BlobUrlToBase64(blobUrl);
                contentStringBuilder.Replace(blobUrl, res);
            }

            content = contentStringBuilder.ToString();
        }

        return content;
    }
}
